{
  "name": "store",
  "description": "File system storage and retrieval of objects as JSON",
  "version": "0.0.1",
  "dependencies": {
    "async": ">= 0.1.x",
    "node-uuid": ">= 0.0.x",
    "mkdirp": ">= 0.3.3"
  },
  "devDependencies": {
    "temp": ">= 0.4.x",
    "mocha": ">= 0.0.x",
    "chai": ">= 0.0.x"
  },
  "main": "index",
  "engines": {
    "node": ">=0.4.12"
  },
  "readme": "This Node.js npm module simply serializes JavaScript objects to JSON files into the file system directory of your choosing.\n\n### Creating a store\n\nThe store module is a function that takes a single parameter: the path to the location on the file system where you want to store your objects. If you omit the storage location the 'store' directory in your current working directory will be used.\n\n```javascript\nvar store = require('store')('/path/to/storage/location');\n```\n\n### Adding an object\n\nA stored object must have an `id` attribute (one will be provided if it does not). The object\nwill be serialized to JSON using `JSON.stringify` and written to the storage location. \n\nTo customize the JSON, you can define the `#toJSON` function on the object to be stored. That function\nmust return a JavaScript object.\n\n```javascript\nvar donkey = {\n  id: '12345',\n  name: 'samuel',\n  color: 'brown'\n};\n\nstore.add(donkey, function(err) {\n  // called when the file has been written\n  // to the /path/to/storeage/location/12345.json\n  if (err) throw err; // err if the save failed\n});\n```\n\n### Listing stored objects\n\nEvery call to the `#list` function reads the file system and returns the objects stored in the directory you specified when you created your store.\nObjects will be sorted according to their `name` attribute, if defined.\n\n```javascript\nstore.list(function(err, objects) {\n  // err if there was trouble reading the file system\n  if (err) throw err;\n  // objects is an array of JS objects sorted by name, one per JSON file\n  console.log(objects);\n});\n```\n\n### Removing stored objects\n\nA stored object may be removed simply by passing the object to the `#remove` function.\nThe object's `id` attribute will be used to remove the object's file from the file system.\n\n```javascript\nstore.remove(donkey, function(err) {\n  // called after the file has been removed\n  if (err) throw err; // err if the file removal failed\n});\n```\n\n# FIN.\n",
  "readmeFilename": "readme.md",
  "_id": "store@0.0.1",
  "dist": {
    "shasum": "7dd0678726d1839465069d808c88e620952c2556"
  },
  "_resolved": "git://github.com/alexkwolfe/node-store.git#aea7d056ce58e7cdc5694fcc9aa5d7e2e0d4cd98",
  "_from": "node-store@git://github.com/alexkwolfe/node-store.git#master"
}
